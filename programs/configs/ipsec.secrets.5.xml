<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- lifted from troff+man by doclifter -->
<refentry>
<refentryinfo>
  <author><firstname>Paul</firstname><surname>Wouters</surname><authorblurb><para>libreswan secrets files</para> </authorblurb></author>
</refentryinfo>
<refmeta>
<refentrytitle>IPSEC.SECRETS</refentrytitle>
<manvolnum>5</manvolnum>
<refmiscinfo class='date'>17 April 2014</refmiscinfo>
<refmiscinfo class="source">libreswan</refmiscinfo>
<refmiscinfo class="manual">Executable programs</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>ipsec.secrets</refname>
<refpurpose>secrets for IKE/IPsec authentication</refpurpose>
</refnamediv>
<!-- body begins here -->

<refsect1 id='description'><title>DESCRIPTION</title>
<para>The file <filename>ipsec.secrets</filename> contains
a list of secrets. Currently supported secrets are preshared
secrets (PSKs), RSA keys and XAUTH passwords. These secrets are used by
<citerefentry><refentrytitle>pluto</refentrytitle><manvolnum>8</manvolnum></citerefentry>
, the Libreswan Internet Key Exchange daemon, to authenticate other hosts.
There is another one type of secret, post-quantum preshared keys (PPKs),
that are used for protecting traffic from quantum computer attack.</para>

<para>RSA private keys are stored in the NSS database. The secrets
file only contains a reference to these private RSA keys. For RSA keys
belonging to imported X.509 certificates, the certificate "friendly name"
is used. For raw RSA keys, the CKAID is used.</para>

<para>XAUTH passwords are stored in plaintext in this file. The secrets
file should be owned by root, and permissions should be set to block
all access by others. (eg: chmod 600)</para>

<para>The file is a sequence of entries and include directives.
Here is an example - each entry or directive must start at the
left margin, but if it continues beyond a single line, each continuation
line must be indented.
<literallayout remap='.nf'>
# sample @IPSEC_SECRETS_FILE@ file for 10.1.0.1
10.1.0.1 10.2.0.1 : PSK "secret shared by two hosts"
# sample roadwarrior
%any gateway.corp.com : PSK "shared secret with many roadwarriors"
# sample server for roadwarriors
myip %any : PSK "shared secret with many roadwarriors"

# an entry may be split across lines,
# but indentation matters
www.xs4all.nl @www.kremvax.ru
&nbsp;&nbsp;&nbsp;&nbsp;10.6.0.1 10.7.0.1 1.8.0.1 : PSK "secret shared by 5 systems"

# sample entry for static PPK
10.1.0.1 10.2.0.1 : PPKS "PPK_ID_1" "post-quantum preshared key for extra security"

# a raw RSA private key in NSS.
# note that the lines are too wide for a
# man page, so ... has been substituted for
# the truncated part
@my.com : RSA {
&nbsp;&nbsp;&nbsp;&nbsp;#ckaid:&nbsp;0x316e6593...
&nbsp;&nbsp;&nbsp;&nbsp;#pubkey=0sAQPaGwWbUSK...
&nbsp;&nbsp;&nbsp;&nbsp;Modulus: 0x.....
&nbsp;&nbsp;&nbsp;&nbsp;PublicExponent:&nbsp;0x03
&nbsp;&nbsp;&nbsp;&nbsp;}

# XAUTH password, used with leftxauthusername=username
@username : XAUTH "password"

include ipsec.*.secrets	# get secrets from other files
</literallayout> <!-- .fi -->

Each entry in the file is a list of indices, followed by a secret.
The two parts are separated by a colon (<emphasis remap='B'>:</emphasis>) that is
followed by whitespace or a newline. </para>

<para>An index is an IP address, or a Fully Qualified
Domain Name, user@FQDN, <emphasis remap='B'>%any</emphasis>
or <emphasis remap='B'>%any6</emphasis> (other kinds
may come).  An IP address may be written in the familiar
dotted quad form or as a domain name to be looked up when the
file is loaded.  Be aware that using domain names requires DNS to be functional
before the IPsec tunnel comes up.  To denote a Fully Qualified Domain
Name (as opposed to an IP address denoted by its domain name), precede
the name with an at sign (<emphasis remap='B'>@</emphasis>).</para>

<para>Matching IDs with indices is fairly straightforward: they have to be
equal.  In the case of a "Road Warrior" connection, if an equal
match is not found for the Peer's ID, and it is in the form of an IP
address, an index of <emphasis remap='B'>%any</emphasis> will match the peer's IP address if IPV4
and <emphasis remap='B'>%any6</emphasis> will match a the peer's IP address if IPV6.
</para>

<para>This file is only read at startup time. If any changes are made to this file,
the pluto daemon should be told to re-read this file using the command
<emphasis remap='B'>ipsec secrets</emphasis> or <emphasis remap='B'>ipsec auto --rereadsecrets</emphasis>.
Note that currently there is no way to add a specific new entry - it's
all or nothing.</para>

<para>Smartcard support has been moved from Libreswan to NSS. Please see the NSS
documentation on how to configure smartcards.</para>

<para>An additional complexity arises in the case of authentication by preshared
secret in IKEv1 Main Mode: the responder will need to look up the secret before the Peer's ID payload has
been decoded, so the ID used will be the IP address. IKEv1 Aggressive Mode (aggrmode=yes) can be used
to work around this, at the price of leaking the ID in the clear and allowing a brute force attack
against the PSK to be performed offline. PSKs are the least secure authentication method and should be
avoided.</para>

<para>To authenticate a connection between two hosts, the entry that most
specifically matches the host and peer IDs is used.  An entry with no
index will match any host and peer.  More specifically, an entry with one index will
match a host and peer if the index matches the host's ID (the peer isn't
considered).  Still more specifically, an entry with multiple indices will match a host and
peer if the host ID and peer ID each match one of the indices.  If the key
is for an asymmetric authentication technique (i.e. a public key
system such as RSA), an entry with multiple indices will match a host
and peer even if only the host ID matches an index (it is presumed that the
multiple indices are all identities of the host).
It is acceptable for two entries to be the best match as
long as they agree about the secret or private key.</para>

<para>Authentication by preshared secret requires that both systems find the
identical secret (the secret is not actually transmitted by the IKE
protocol).  If both the host and peer appear in the index list, the
same entry will be suitable for both systems so verbatim copying
between systems can be used.  This naturally extends to larger groups
sharing the same secret.  Thus multiple-index entries are best for PSK
authentication.</para>

<para>
When running in FIPS mode, PSK's need to comply to a minimum strength requirement
depending on the integrity algorithm used. It is recommended not to use PSK's shorter
then 64 random characters.
</para>

<para>Authentication by raw RSA Signatures requires that each host have its own private
key.  A host could reasonably use a different private keys
for different interfaces and for different peers.  But it would not
be normal to share entries between systems.  Thus no-index and
one-index forms of entry often make sense for RSA Signature authentication.</para>

<para>The key part of an entry may start with a token indicating the kind of
key.  "RSA" signifies RSA private key and "PSK" signifies
PreShared Key (case is ignored). </para>

<para>The token "XAUTH" indicates
an IKEv1  eXtended Authentication password. There should be one index, and it
should be in the @FQDN format. The file will be searched with the XAUTH
username, which is usually provided in the configuration file.
XAUTH is otherwise identical to PSK in syntax.
</para>

<para>A preshared secret is most conveniently represented as a sequence of
characters, delimited by the double-quote
character (<emphasis remap='B'>"</emphasis>).  The sequence cannot contain a newline or
double-quote.  Strictly speaking, the secret is actually the sequence
of bytes that is used in the file to represent the sequence of
characters (excluding the delimiters).
A preshared secret may also be represented, without quotes, in any of supported formats.</para>

<para>Currently supported formats are hexadecimal, base64, and characters.</para>

<para>A hexadecimal text value begins with a
<emphasis remap='B'>0x</emphasis>
(or
<emphasis remap='B'>0X</emphasis>)
prefix and continues with two-digit groups
of hexadecimal digits (0-9, and a-f or A-F),
each group encoding the value of one binary byte, high-order digit first.
A single
<emphasis remap='B'>_</emphasis>
(underscore)
between consecutive groups is ignored, permitting punctuation to improve
readability; doing this every eight digits seems about right.</para>

<para>A base64 text value begins with a
<emphasis remap='B'>0s</emphasis>
(or
<emphasis remap='B'>0S</emphasis>)
prefix
and continues with four-digit groups of base64 digits (A-Z, a-z, 0-9, +, and /),
each group encoding the value of three binary bytes as described in
section 6.8 of RFC 2045.
If
<varname role='parameter'>flags</varname>
has the
<emphasis remap='B'>TTODATAV_IGNORESPACE</emphasis>
bit on, blanks are ignore (after the prefix).
Note that the last one or two digits of a base64 group can be
<emphasis remap='B'>=</emphasis>
to indicate that fewer than three binary bytes are encoded.</para>

<para>A character text value begins with a
<emphasis remap='B'>0t</emphasis>
(or
<emphasis remap='B'>0T</emphasis>)
prefix
and continues with text characters, each being the value of one binary byte.</para>

<para>A raw RSA private key is a composite of eight generally large numbers.  The notation
used is a brace-enclosed list of field name and value pairs (see the example above).
A suitable key, in a suitable format, may be generated by <citerefentry><refentrytitle>ipsec_rsasigkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
The structure is very similar to that used by BIND 8.2.2 or later, but note that
the numbers must have a "0s" prefix if they are in base 64.  The order of
the fields is fixed. Note that most fields are now unused and filled in with the CKAID, which is a reference
to the location within the NSS database.</para>

<para>Post-quantum preshared keys (PPK) can be static. The token &ldquo;PPKS&rdquo; indicates that the
following key will be a PPK.
The next token is a PPK_ID that uniquely represents the given PPK. PPK_ID must be represented as a sequence of characters
delimited by the double-quote character (<emphasis remap='B'>"</emphasis>).
The next token is a PPK itself.
The static PPK may be represented in any format that can be used for representing a preshared secret.
It is recommended that the static PPK be at least 256 bits in order to provide real
security against quantum computer attacks.</para>

<para>The first token of an entry must start in the first column of its line.  Subsequent tokens must be
separated by whitespace, except for a colon token, which only needs to be followed by whitespace.
A newline is taken as whitespace, but every line of an entry after the first must be indented.</para>

<para>Whitespace at the end of a line is ignored (except in the 0t
notation for a key).  At the start of line or
after whitespace, <emphasis remap='B'>#</emphasis> and the following text up to the end of the
line is treated as a comment.  Within entries, all lines must be
indented (except for lines with no tokens).
Outside entries, no line may be indented (this is to make sure that
the file layout reflects its structure).</para>

<para>An include directive causes the contents of the named file to be processed
before continuing with the current file.  The filename is subject to
"globbing" as in <citerefentry><refentrytitle>sh</refentrytitle><manvolnum>1</manvolnum></citerefentry>, so every file with a matching name is processed.  Includes may be nested to a modest
depth (10, currently).  If the filename doesn't start with a <emphasis remap='B'>/</emphasis>, the
directory containing the current file is prepended to the name.  The
include directive is a line that starts with the word <emphasis remap='B'>include</emphasis>,
followed by whitespace, followed by the filename (which must not contain
whitespace).</para>
</refsect1>

<refsect1 id='files'><title>FILES</title>
<para>@IPSEC_SECRETS_FILE@</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para>The rest of the Libreswan distribution, in particular
<citerefentry><refentrytitle>ipsec.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
<citerefentry><refentrytitle>ipsec</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
<citerefentry><refentrytitle>ipsec_newhostkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
<citerefentry><refentrytitle>ipsec_rsasigkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
<citerefentry><refentrytitle>ipsec_showhostkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
<citerefentry><refentrytitle>ipsec_auto</refentrytitle><manvolnum>8</manvolnum></citerefentry> <option>--rereadsecrets</option>,
and <citerefentry><refentrytitle>pluto</refentrytitle><manvolnum>8</manvolnum></citerefentry> <option>--listen</option>.
</para>
</refsect1>

<refsect1 id='history'><title>HISTORY</title>
<para>Originally designed for the FreeS/WAN project
&lt;<ulink url='http://www.freeswan.org'>http://www.freeswan.org</ulink>&gt; by
D. Hugh Redelmeier.  Updated for Openswan by Ken Bantoft. Updated for
Libreswan by Paul Wouters</para> <para>This file originally stored the
private part of RSA keys. All private key material is now stored in
the NSS database. The fields of the raw RSA key currently filled with
the CKAID might be ignored and removed in future versions.  </para>
</refsect1>

<refsect1 id='bugs'><title>BUGS</title>
<para>If an ID is <literal>0.0.0.0</literal>, it will match <emphasis remap='B'>%any</emphasis>;
if it is <emphasis remap='B'>0::0</emphasis>, it will match <emphasis remap='B'>%any6</emphasis>.</para>
</refsect1>
</refentry>

