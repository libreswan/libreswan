  <varlistentry>
  <term><emphasis remap='B'>phase2alg</emphasis></term>
  <listitem>
<para> Specifies the algorithms that will be offered/accepted for a phase2
negotiation. If not specified, a secure set of defaults will be used. Sets
are separated using comma's.
</para>
<para>The default values are the same as for ike=
Note also that not all ciphers available to the kernel (eg through CryptoAPI)
are necessarily supported here.</para>
<para> The format for ESP is ENC-AUTH followed by one optional PFSgroup. For
instance, "3des-md5" or "aes256-sha1;modp2048" or  "aes-sha1,aes-md5". When
specifying multiple algorithms, specify the PFSgroup last, e.g. "3des-md5,aes256-sha1;modp2048".
</para>

<para>For RFC-5114 DH groups, use the "dh" keyword, eg
"aes256-sha1;dh23". These specific DH groups are extremely controversial
and MUST NOT be used unless forced (administratively) by the other party.
Support for these groups will most likely be removed in 2017, as it
cannot be proven these DH groups do not have a cryptographic trapdoor
embedded in them (a backdoor by the USG who gave us these primes without
revealing the seeds and generation process) </para>

<para> The format for AH is AUTH followed by an optional PFSgroup. For
instance, "md5" or "sha1;modp1536".
</para>
<para>AEAD algorithms such as AES-GCM and AES-CCM require null for the authentication algorithm, for example
<emphasis remap='I'>phase2alg=aes_ccm-null</emphasis> or
<emphasis remap='I'>phase2alg=aes_gcm-null</emphasis>. Note that the ike= syntax for aes_gcm does not specify a
null authentication but specifies the prf instead.
The supported key sizes are 128, 192 and 256, which are specified similarly
to plain aes, i.e. <emphasis remap='I'>phase2alg=aes_gcm256</emphasis>. A
subscript of <emphasis remap='I'>_c</emphasis>, <emphasis remap='I'>_b</emphasis>
or <emphasis remap='I'>_a</emphasis> can be used to refer to the different ICV variants
where a means 8 bytes, b means 12 bytes and c means 16 bytes. The default
when not using a subscript is the 16 byte ICV, the recommended value by RFC-4106.
Therefore phase2alg=aes_gcm256-null is equivalent to phase2alg=aes_gcm_c256-null.
It is recommended to migrate to the _c versions (without specifying _c),
as support for smaller ICV's might be removed in the near future.</para>

<para>The supported algorithms depend on the libreswan version, OS and
kernel stack used. Possible ciphers are aes, 3des, aes_ctr, aes_gcm,
aes_ccm, camellia, serpent and twofish.</para>

<para>Note that openswan and versions of libreswan up to 3.6 require manually
adding the salt size to the key size. Therefore, to configure an older
version of openswan or libreswan, use: "phase2alg=aes_ccm_c-280-null" to
interop with a new libreswan using "phase2alg=aes_ccm256". For
CCM, the 'keysize' needs to be increased by 24, resulted in valid keysizes
of 152, 215 and 280. For GCM the 'keysize' needs to be increased by 32,
resulting valid 'keysizes' of 160, 224 and 288.
</para>
  </listitem>
  </varlistentry>
