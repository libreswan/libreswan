<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- lifted from troff+mdoc by doclifter -->
<refentry id='ipsec_set_policy3'>
<!-- 	$KAME: ipsec_set_policy.3,v 1.15 2001/08/17 07:21:36 itojun Exp $ -->

<!--  Copyright (C) 1995, 1996, 1997, 1998, and 1999 WIDE Project. -->
<!--  All rights reserved. -->

<!--  Redistribution and use in source and binary forms, with or without -->
<!--  modification, are permitted provided that the following conditions -->
<!--  are met: -->
<!--  1. Redistributions of source code must retain the above copyright -->
<!--     notice, this list of conditions and the following disclaimer. -->
<!--  2. Redistributions in binary form must reproduce the above copyright -->
<!--     notice, this list of conditions and the following disclaimer in the -->
<!--     documentation and/or other materials provided with the distribution. -->
<!--  3. Neither the name of the project nor the names of its contributors -->
<!--     may be used to endorse or promote products derived from this software -->
<!--     without specific prior written permission. -->

<!--  THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND -->
<!--  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE -->
<!--  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE -->
<!--  ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE -->
<!--  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL -->
<!--  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS -->
<!--  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) -->
<!--  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT -->
<!--  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY -->
<!--  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF -->
<!--  SUCH DAMAGE. -->

<!--  $FreeBSD$ -->





<refmeta>
<refentrytitle>IPSEC_SET_POLICY</refentrytitle>
<manvolnum>3</manvolnum>
</refmeta>

<refnamediv id='purpose'>
<refname> ipsec_set_policy</refname>
<refpurpose> create an IPsec policy structure from a human readable string  </refpurpose>
</refnamediv>
<refsynopsisdiv id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include &lt;netinet6/ipsec.h&gt;
</funcsynopsisinfo>
<funcprototype>
<funcdef>char *<function>ipsec_set_policy</function></funcdef>
    <paramdef>char * <parameter>policy</parameter></paramdef>
    <paramdef>int <parameter>len</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>ipsec_get_policylen</function></funcdef>
    <paramdef>char * <parameter>buf</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>ipsec_dump_policy</function></funcdef>
    <paramdef>char * <parameter>buf</parameter></paramdef>
    <paramdef>char * <parameter>delim</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 id='library'><title>LIBRARY</title>
<para><citetitle>IPsec Policy Control Library (libipsec, -lipsec)</citetitle></para>
</refsect1>

<refsect1 id='description'><title>DESCRIPTION</title>
<para>The
ipsec_set_policy();
function generates an IPsec policy specification structure,
<literal>struct</literal> <literal>sadb_x_policy</literal>
and/or
<literal>struct</literal> <literal>sadb_x_ipsecrequest</literal>
from a human-readable policy specification.
The policy specification must be given as a C string,
passed in the
<emphasis remap='Fa'>policy</emphasis>
argument and the length of the string, given as
<emphasis remap='Fa'>len</emphasis>.
The
ipsec_set_policy();
function returns pointer to a buffer that contains a properly formed
IPsec policy specification structure.
The buffer is dynamically allocated, and must be freed by using the
<citerefentry><refentrytitle>free</refentrytitle><manvolnum>3</manvolnum></citerefentry>
library function.</para>

<para>The
ipsec_get_policylen();
function will returns the address of the buffer that is needed when passing
the specification structure to the
<citerefentry><refentrytitle>setsockopt</refentrytitle><manvolnum>2</manvolnum></citerefentry>
system call.</para>

<para>The
ipsec_dump_policy();
function converts an IPsec policy structure into a human readable form.
The
<emphasis remap='Fa'>buf</emphasis>
argument points to an IPsec policy structure,
<literal>struct</literal> <literal>sadb_x_policy</literal>.
<emphasis remap='Fa'>delim</emphasis>
is a delimiter string, which is usually a blank character.
If you set
<emphasis remap='Fa'>delim</emphasis>
to
<constant>NULL</constant>,
a single white space is assumed.
The
ipsec_dump_policy();
function returns a pointer to dynamically allocated string.
It is the caller's responsibility to free the returned pointer using the
<citerefentry><refentrytitle>free</refentrytitle><manvolnum>3</manvolnum></citerefentry>
library call.</para>

<para>A
<emphasis remap='Fa'>policy</emphasis>
is given in the following way:</para>
<variablelist remap='Bl -tag -width discard'>
<varlistentry>
<term><replaceable>direction</replaceable> <literal>discard</literal></term>
<listitem>
<para>The
<replaceable>direction</replaceable>
must be
<literal>in</literal>
or
<literal>out</literal>
and
specifies which direction the policy needs to be applied, either on
inbound or outbound packets.
When the
<literal>discard</literal>
policy is selected, packets will be dropped if they match the policy.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable>direction</replaceable> <literal>entrust</literal></term>
<listitem>
<para><literal>entrust</literal>
means to consult the security policy database
(SPD)
in the kernel, as controlled by
<citerefentry><refentrytitle>setkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable>direction</replaceable> <literal>bypass</literal></term>
<listitem>
<para>A direction of
<literal>bypass</literal>
indicates that IPsec processing should not occur and that the
packet will be transmitted in clear.  The bypass option is only
available to privileged sockets.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
 <replaceable>direction</replaceable> <replaceable>
</replaceable> <literal>ipsec</literal> <literal>
</literal> <replaceable>request</replaceable> <replaceable>..</replaceable> <replaceable>
</replaceable></term>
<listitem>
<para>A direction of
<literal>ipsec</literal>
means that matching packets are processed by IPsec.
<literal>ipsec</literal>
can be followed by one or more
<replaceable>request</replaceable>
strings, each formatted as:</para>
<variablelist remap='Bl -tag -width discard'>
<varlistentry>
<term>
 <replaceable>protocol</replaceable> <replaceable>
</replaceable> <literal>/</literal> <literal>
</literal> <replaceable>mode</replaceable> <replaceable>
</replaceable> <literal>/</literal> <literal>
</literal> <replaceable>src</replaceable> <replaceable>
</replaceable> <literal>-</literal> <literal>
</literal> <replaceable>dst</replaceable> <replaceable>
</replaceable> <replaceable>/level</replaceable> <replaceable>
</replaceable></term>
<listitem>
<para>The
<replaceable>protocol</replaceable>
is one of:
<literal>ah</literal>,
<literal>esp</literal>
or
<literal>ipcomp</literal>
indicating Authentication Header, Encapsulating Security Protocol or
IP Compression protocol is used.</para>

<para>The
<replaceable>mode</replaceable>
is either
<literal>transport</literal>
or
<literal>tunnel</literal>
the meanings of both modes are described in
<citerefentry><refentrytitle>ipsec</refentrytitle><manvolnum>4</manvolnum></citerefentry>.</para>

<para>The
<replaceable>src</replaceable>
and
<replaceable>dst</replaceable>
specify the IP address, either v4 or v6, of the source and destination systems.
The
<replaceable>src</replaceable>
always stands for the
&ldquo;sending node&rdquo;
and
<replaceable>dst</replaceable>
always stands for the
&ldquo;receiving node&rdquo;.
When
<replaceable>direction</replaceable>
is
<literal>in</literal>,
<replaceable>dst</replaceable>
is this local node
and
<replaceable>src</replaceable>
is the remote node or peer.
If
<replaceable>mode</replaceable>
is
<literal>transport</literal>,
both
<replaceable>src</replaceable>
and
<replaceable>dst</replaceable>
can be omitted.</para>

<para>The
<replaceable>level</replaceable>
must be set to one of the following:
<literal>default</literal>, <literal>use</literal>, <literal>require</literal>
or
<literal>unique</literal>.
<literal>default</literal>
means that the kernel should consult the default security policies as
defined by a set of
<citerefentry><refentrytitle>sysctl</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
variables.  The relevant
<citerefentry><refentrytitle>sysctl</refentrytitle><manvolnum>8</manvolnum></citerefentry>
variables are described in
<citerefentry><refentrytitle>ipsec</refentrytitle><manvolnum>4</manvolnum></citerefentry>.</para>

<para>When
<literal>use</literal>
is selected a relevant security association
(SA)
can be used when available but is not necessary.
If the SA is available then packets will be handled by IPsec,
i.e. encrypted and/or authenticated but if an SA is not available then
packets will be transmitted in the clear.  The
<literal>use</literal>
option is not recommended because it allows for accidental
mis-configurations where encrypted or authenticated link becomes
unencrypted or unauthenticated, the
<literal>require</literal>
keyword is recommended instead of
<literal>use</literal>
where possible.
Using the
<literal>require</literal>
keyword means that a relevant SA is required,
and that the kernel must perform IPsec processing on all matching
packets.</para>

<para>The
<literal>unique</literal>
keyword has the same effect as
<literal>require</literal>,
but adds the restriction that the SA for outbound traffic is used
only for this policy.
You may need the identifier in order to relate the policy and the SA
when you define the SA by manual keying using
<citerefentry><refentrytitle>setkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
Put the decimal number as the identifier after the
<literal>unique</literal>
keyword in this way:
<literal>unique</literal> <literal>:</literal> <literal>number</literal>,
where
<literal>number</literal>
must be between 1 and 32767.</para>

<para>If the
<replaceable>request</replaceable>
string is kept unambiguous,
<replaceable>level</replaceable>
and the slash prior to
<replaceable>level</replaceable>
can be omitted but you are encouraged to specify them explicitly
to avoid unintended behaviors.
If
<replaceable>level</replaceable>
is omitted, it will be interpreted as
<literal>default</literal>.</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>

<para>Note that there is a difference between the specification allowed here
and in
<citerefentry><refentrytitle>setkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
When specifying security policies with
<citerefentry><refentrytitle>setkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
neither entrust nor bypass are used.
Refer to
<citerefentry><refentrytitle>setkey</refentrytitle><manvolnum>8</manvolnum></citerefentry>
for details.</para>
</refsect1>

<refsect1 id='examples'><title>EXAMPLES</title>
<para>Set a policy that all inbound packets are discarded.</para>
<literallayout remap='Bd'>
in discard

</literallayout> <!-- remap='Bd' -->

<para>All outbound packets are required to be processed by IPsec and
transported using ESP.</para>
<literallayout remap='Bd'>
<synopsis>
out ipsec esp/transport//require

</synopsis>
</literallayout> <!-- remap='Bd' -->

<para>All inbound packets are required to be authenticated using the AH protocol.</para>
<literallayout remap='Bd'>
<synopsis>
in ipsec ah/transport//require

</synopsis>
</literallayout> <!-- remap='Bd' -->

<para>Tunnel packets outbound through the endpoints at 10.1.1.2 and 10.1.1.1.</para>
<literallayout remap='Bd'>
out ipsec esp/tunnel/10.1.1.2-10.1.1.1/require

</literallayout> <!-- remap='Bd' -->

</refsect1>

<refsect1 id='return_values'><title>RETURN VALUES</title>
<para>The
ipsec_set_policy();
function returns a pointer to the allocated buffer containing a the
policy specification if successful; otherwise a NULL pointer is
returned.</para>

<para>The
ipsec_get_policylen();
function returns a positive value,
indicating the buffer size,
on success, and a negative value on error.</para>

<para>The
ipsec_dump_policy();
function returns a pointer to a dynamically allocated region
containing a human readable security policy on success, and
<constant>NULL</constant>
on error.</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>ipsec_strerror</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
<citerefentry><refentrytitle>ipsec</refentrytitle><manvolnum>4</manvolnum></citerefentry>,
<citerefentry><refentrytitle>setkey</refentrytitle><manvolnum>8</manvolnum></citerefentry></para>
</refsect1>

<refsect1 id='history'><title>HISTORY</title>
<para>These functions first appeared in WIDE/KAME IPv6 protocol stack kit.</para>

<para>IPv6 and IPsec support based on the KAME Project (http://www.kame.net/) stack
was initially integrated into
<productname>FreeBSD 4.0</productname></para>
</refsect1>
</refentry>

